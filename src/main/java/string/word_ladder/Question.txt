Ref to http://www.programcreek.com/2012/12/leetcode-word-ladder/

The problem:

Given two words (start and end), and a dictionary,
find the length of shortest transformation sequence from start to end, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the dictionary
For example,

Given:

start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]
As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog", the program should return its length 5.

Note:
Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.

This problem is a classic problem that has been asked frequently during interviews.

Sol: Breath First Search

We quickly realize that this looks like a tree searching problem for which breath first guarantees the optimal solution.

Assuming we have some words in the dictionary, and the start is "hit".
We can use two queues to traverse the tree, one stores the nodes, the other stores the step numbers.

